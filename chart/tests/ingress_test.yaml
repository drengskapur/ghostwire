suite: test ingress
templates:
  - ingress-ghostwire.yaml
tests:
  ## Ingress Disabled
  - it: should not create Ingress when disabled
    set:
      ingress.enabled: false
    asserts:
      - hasDocuments:
          count: 0

  ## Basic Ingress Configuration
  - it: should create Ingress when enabled
    set:
      ingress.enabled: true
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: metadata.name
          value: RELEASE-NAME-ghostwire

  - it: should set ingress className when specified
    set:
      ingress.enabled: true
      ingress.className: nginx
    asserts:
      - equal:
          path: spec.ingressClassName
          value: nginx

  - it: should not set ingress className when empty
    set:
      ingress.enabled: true
      ingress.className: ""
    asserts:
      - isNull:
          path: spec.ingressClassName

  ## Host and Path Configuration
  - it: should configure default host and path
    set:
      ingress.enabled: true
    asserts:
      - equal:
          path: spec.rules[0].host
          value: signal.example.com
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: /
      - equal:
          path: spec.rules[0].http.paths[0].pathType
          value: Prefix

  - it: should route to haproxy service by default
    set:
      ingress.enabled: true
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: RELEASE-NAME-ghostwire-haproxy
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 6901

  - it: should route directly to ghostwire when haproxy is disabled
    set:
      ingress.enabled: true
      haproxy.enabled: false
      service.port: 6901
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: RELEASE-NAME-ghostwire
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 6901

  - it: should support multiple hosts
    set:
      ingress.enabled: true
      ingress.hosts:
        - host: signal1.example.com
          paths:
            - path: /
              pathType: Prefix
        - host: signal2.example.com
          paths:
            - path: /app
              pathType: Prefix
    asserts:
      - equal:
          path: spec.rules[0].host
          value: signal1.example.com
      - equal:
          path: spec.rules[1].host
          value: signal2.example.com
      - equal:
          path: spec.rules[1].http.paths[0].path
          value: /app

  ## Annotations
  - it: should include custom annotations when specified
    set:
      ingress.enabled: true
      ingress.annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        custom-annotation: custom-value
    asserts:
      - equal:
          path: metadata.annotations["cert-manager.io/cluster-issuer"]
          value: letsencrypt-prod
      - equal:
          path: metadata.annotations["custom-annotation"]
          value: custom-value

  ## TLS Configuration
  - it: should configure TLS when specified
    set:
      ingress.enabled: true
      ingress.tls:
        - secretName: signal-tls
          hosts:
            - signal.example.com
    asserts:
      - equal:
          path: spec.tls[0].secretName
          value: signal-tls
      - contains:
          path: spec.tls[0].hosts
          content: signal.example.com

  - it: should not configure TLS when not specified
    set:
      ingress.enabled: true
      ingress.tls: []
    asserts:
      - isNull:
          path: spec.tls

  ## Labels
  - it: should include standard labels
    set:
      ingress.enabled: true
    asserts:
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: ghostwire
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: RELEASE-NAME
      - equal:
          path: metadata.labels["app.kubernetes.io/managed-by"]
          value: Helm
