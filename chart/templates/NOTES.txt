Thank you for installing {{ .Chart.Name }}!

Your Signal desktop application has been deployed as a StatefulSet.

{{- if .Values.auth.enabled }}

üîí AUTHENTICATION ENABLED
=======================
OAuth2 Proxy is protecting your Signal VNC session.

{{- end }}

To access Signal:

{{- if .Values.ingress.enabled }}

1. Via Ingress:
{{- range .Values.ingress.hosts }}
   http{{ if $.Values.ingress.tls }}s{{ end }}://{{ .host }}
{{- end }}
{{- else if eq .Values.service.type "LoadBalancer" }}

1. Get the LoadBalancer IP:
   kubectl get svc {{ include "signal.fullname" . }} -n {{ .Release.Namespace }}

2. Access Signal VNC interface at:
   http://<EXTERNAL-IP>:{{ .Values.service.port }}

{{- else if eq .Values.service.type "NodePort" }}

1. Get the Node IP and Port:
   export NODE_PORT=$(kubectl get svc {{ include "signal.fullname" . }} -n {{ .Release.Namespace }} -o jsonpath='{.spec.ports[0].nodePort}')
   export NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}')

2. Access Signal VNC interface at:
   http://$NODE_IP:$NODE_PORT

{{- else }}

1. Port forward to access locally:
   kubectl port-forward -n {{ .Release.Namespace }} svc/{{ include "signal.fullname" . }} {{ .Values.service.port }}:{{ .Values.service.port }}

2. Access Signal VNC interface at:
   http://localhost:{{ .Values.service.port }}

{{- end }}

3. Login credentials:
{{- if .Values.auth.enabled }}
   First, authenticate with OAuth2 Proxy:
     Users: {{ len .Values.auth.users }} configured
     Session duration: {{ .Values.auth.cookieExpire }}

   Then, VNC credentials:
{{- end }}
   Username: kasm_user
   Password: {{ range .Values.env }}{{ if eq .name "VNC_PW" }}{{ .value }}{{ end }}{{ end }}

IMPORTANT NOTES:
{{- if .Values.auth.enabled }}
- ‚ö†Ô∏è  Change auth.cookieSecret in values.yaml (generate with: openssl rand -base64 32)
- ‚ö†Ô∏è  Update auth.users with your own htpasswd entries (htpasswd -nbB username password)
{{- end }}
- Change the VNC password in values.yaml before deploying to production
- Signal will persist data to a PersistentVolume
- First time setup will require linking to your phone number
- The StatefulSet ensures your Signal data persists across pod restarts
{{- if .Values.auth.enabled }}
- OAuth2 Proxy provides WebSocket-compatible authentication for VNC
- Sessions last {{ .Values.auth.cookieExpire }} with {{ .Values.auth.cookieRefresh }} refresh
{{- end }}

To view logs:
  kubectl logs -n {{ .Release.Namespace }} -l app.kubernetes.io/name={{ include "signal.name" . }} -f

To view the StatefulSet:
  kubectl get statefulset {{ include "signal.fullname" . }} -n {{ .Release.Namespace }}

To view the PVC:
  kubectl get pvc -n {{ .Release.Namespace }} -l app.kubernetes.io/name={{ include "signal.name" . }}
