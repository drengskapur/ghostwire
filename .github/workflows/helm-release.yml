name: Release and Package

on:
  push:
    branches:
      - main
    paths:
      - 'chart/**'
      - '.github/workflows/helm-release.yml'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
    paths:
      - 'chart/**'
      - '.github/workflows/helm-release.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions: {}

env:
  REGISTRY: ghcr.io
  CHART_PATH: chart
  CHART_REGISTRY_PATH: charts

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: '3.14.0'

      - name: Helm lint
        run: helm lint ${{ env.CHART_PATH }}

      - name: Helm template
        run: helm template test ${{ env.CHART_PATH }} > /dev/null

      - name: Install helm-unittest plugin
        run: helm plugin install https://github.com/helm-unittest/helm-unittest

      - name: Run helm unit tests
        run: helm unittest ${{ env.CHART_PATH }} --strict

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write  # For creating GitHub releases
      packages: write  # For pushing Helm charts to GHCR
      id-token: write  # For cosign keyless signing
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: '3.14.0'

      - name: Install cosign
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📌 Release version: ${VERSION}"

      - name: Package Helm chart with semver
        run: |
          CHART_NAME=$(grep '^name:' ${{ env.CHART_PATH }}/Chart.yaml | awk '{print $2}')

          # Update Chart.yaml with semantic version
          sed -i "s/^version:.*/version: ${{ steps.version.outputs.version }}/" ${{ env.CHART_PATH }}/Chart.yaml

          helm package ${{ env.CHART_PATH }}
          echo "chart_name=${CHART_NAME}" >> $GITHUB_OUTPUT
        id: package

      - name: Log in to GitHub Container Registry (Helm)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Log in to GitHub Container Registry (Docker/Cosign)
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if version already exists
        run: |
          CHART_NAME="${{ steps.package.outputs.chart_name }}"
          VERSION=${{ steps.version.outputs.version }}

          # Check if the version already exists in GHCR
          if helm pull oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }}/${CHART_NAME} --version ${VERSION} 2>/dev/null; then
            echo "❌ ERROR: Version ${VERSION} already exists in registry!"
            echo "🚫 Chart versions are immutable and cannot be overwritten."
            exit 1
          else
            echo "✅ Version ${VERSION} does not exist - safe to publish"
          fi

      - name: Push chart with semver tag
        id: push_semver
        run: |
          CHART_NAME="${{ steps.package.outputs.chart_name }}"
          VERSION=${{ steps.version.outputs.version }}

          PUSH_OUTPUT=$(helm push ${CHART_NAME}-${VERSION}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }} 2>&1)
          echo "$PUSH_OUTPUT"

          DIGEST=$(echo "$PUSH_OUTPUT" | grep Digest | awk '{print $2}')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "✅ Published ${CHART_NAME}:${VERSION} with digest ${DIGEST}"
          echo "🔒 This version is now immutable and cannot be overwritten"

      - name: Sign chart with semver tag
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }}/${{ steps.package.outputs.chart_name }}@${{ steps.push_semver.outputs.digest }}

      - name: Tag as latest-stable
        id: push_stable
        run: |
          CHART_NAME="${{ steps.package.outputs.chart_name }}"
          VERSION=${{ steps.version.outputs.version }}

          # Pull the chart we just pushed
          helm pull oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }}/${CHART_NAME} --version ${VERSION}

          # Re-package with latest-stable tag (semver-compatible)
          tar -xzf ${CHART_NAME}-${VERSION}.tgz
          sed -i "s/^version:.*/version: 0.0.0-latest-stable/" ${CHART_NAME}/Chart.yaml
          helm package ${CHART_NAME}

          # Push with latest-stable tag
          PUSH_OUTPUT=$(helm push ${CHART_NAME}-0.0.0-latest-stable.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }} 2>&1)
          echo "$PUSH_OUTPUT"

          DIGEST=$(echo "$PUSH_OUTPUT" | grep Digest | awk '{print $2}')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "✅ Tagged as ${CHART_NAME}:latest-stable with digest ${DIGEST}"

      - name: Sign latest-stable tag
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }}/${{ steps.package.outputs.chart_name }}@${{ steps.push_stable.outputs.digest }}

      - name: Install git-cliff
        run: |
          wget -qO- https://github.com/orhun/git-cliff/releases/download/v2.10.1/git-cliff-2.10.1-x86_64-unknown-linux-gnu.tar.gz | tar xz --strip-components=1
          sudo mv git-cliff /usr/local/bin/
          git-cliff --version

      - name: Install syft for SBOM generation
        uses: anchore/sbom-action/download-syft@ab5d7b5f48981941c4c5d6bf33aeb98fe3bae38c # v0.18.6

      - name: Generate SBOM
        run: |
          CHART_NAME="${{ steps.package.outputs.chart_name }}"
          VERSION=${{ steps.version.outputs.version }}

          # Generate SBOM for the packaged chart
          syft packages file:${CHART_NAME}-${VERSION}.tgz \
            --output spdx-json \
            --file ${CHART_NAME}-${VERSION}.spdx.json

          echo "✅ SBOM generated: ${CHART_NAME}-${VERSION}.spdx.json"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CHART_NAME="${{ steps.package.outputs.chart_name }}"
          VERSION=${{ steps.version.outputs.version }}

          # Generate release notes for this version with git-cliff
          RELEASE_NOTES=$(git-cliff --latest --strip all)

          gh release create "v${VERSION}" \
            --title "v${VERSION}" \
            --notes "${RELEASE_NOTES}" \
            ${CHART_NAME}-${VERSION}.tgz \
            ${CHART_NAME}-${VERSION}.spdx.json
