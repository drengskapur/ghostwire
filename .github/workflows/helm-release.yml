name: Release and Package

on:
  push:
    branches:
      - main
    paths:
      - 'chart/**'
      - '.github/workflows/helm-release.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'chart/**'
      - '.github/workflows/helm-release.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions: {}

env:
  REGISTRY: ghcr.io
  CHART_PATH: chart
  CHART_REGISTRY_PATH: charts

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: '3.14.0'

      - name: Helm lint
        run: helm lint ${{ env.CHART_PATH }}

      - name: Helm template
        run: helm template test ${{ env.CHART_PATH }} > /dev/null

      - name: Install helm-unittest plugin
        run: helm plugin install https://github.com/helm-unittest/helm-unittest

      - name: Run helm unit tests
        run: helm unittest ${{ env.CHART_PATH }} --strict

  publish-latest:
    name: Publish Latest (Bleeding Edge)
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      packages: write
      id-token: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: '3.14.0'

      - name: Install cosign
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0

      - name: Package chart with -latest tag
        id: package
        run: |
          CHART_NAME=$(grep '^name:' ${{ env.CHART_PATH }}/Chart.yaml | awk '{print $2}')
          sed -i "s/^version:.*/version: 0.0.0-latest/" ${{ env.CHART_PATH }}/Chart.yaml
          helm package ${{ env.CHART_PATH }}
          echo "chart_name=${CHART_NAME}" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry (Helm)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | \
            helm registry login "${{ env.REGISTRY }}" \
            -u "${{ github.actor }}" --password-stdin

      - name: Log in to GitHub Container Registry (Docker/Cosign)
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push chart with -latest tag
        id: push_latest
        run: |
          CHART_NAME="${{ steps.package.outputs.chart_name }}"
          chart_url="oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }}"
          PUSH_OUTPUT=$(helm push "${CHART_NAME}-0.0.0-latest.tgz" "${chart_url}" 2>&1)
          echo "$PUSH_OUTPUT"
          DIGEST=$(echo "$PUSH_OUTPUT" | grep Digest | awk '{print $2}')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "✅ Published ${CHART_NAME}:latest with digest ${DIGEST}"

      - name: Sign -latest tag
        run: |
          chart_ref="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }}/${{ steps.package.outputs.chart_name }}@${{ steps.push_latest.outputs.digest }}"
          cosign sign --yes "${chart_ref}"

  integration-test:
    name: K3D Integration Test
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Install k3d
        run: |
          curl -sSL https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh -o /tmp/k3d-install.sh
          echo "0f6bd9a3ab8ea8625843b21657a6538f117975bb2823b73200dc8b92ccc626de /tmp/k3d-install.sh" | sha256sum -c
          bash /tmp/k3d-install.sh
          k3d version

      - name: Install kubectl
        uses: azure/setup-kubectl@776406bce94f63e41d621b960d78ee25c8b76ede # v4.0.1

      - name: Install Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: latest

      - name: Test local chart with k3d
        run: |
          # Override script to use local chart instead of OCI
          export USE_LOCAL_CHART=true
          ./scripts/test-k3d-playwright.sh
        timeout-minutes: 15

      - name: Upload screenshot artifact
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ghostwire-vnc-screenshot-pre-release
          path: test-results/screenshots/ghostwire-vnc.png
          if-no-files-found: warn
          retention-days: 7

      - name: Show pod logs on failure
        if: failure()
        run: |
          kubectl get pods -n ghostwire || true
          kubectl describe pods -n ghostwire || true
          kubectl logs -n ghostwire -l app.kubernetes.io/name=ghostwire --tail=100 || true

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [lint-and-test, integration-test]
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write      # For creating GitHub releases
      packages: write      # For pushing Helm charts to GHCR
      id-token: write      # For cosign keyless signing and provenance attestations
      attestations: write  # For generating build provenance attestations
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: '3.14.0'

      - name: Install cosign
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0

      - name: Install git-cliff
        run: |
          wget -qO- https://github.com/orhun/git-cliff/releases/download/v2.10.1/git-cliff-2.10.1-x86_64-unknown-linux-gnu.tar.gz | tar xz --strip-components=1
          sudo mv git-cliff /usr/local/bin/
          git-cliff --version

      - name: Calculate next version with git-cliff
        id: version
        run: |
          # Get current version from Chart.yaml
          CURRENT_VERSION=$(grep '^version:' ${{ env.CHART_PATH }}/Chart.yaml | awk '{print $2}')
          echo "📌 Current version: ${CURRENT_VERSION}"

          # Use git-cliff to determine next version based on conventional commits
          NEW_VERSION=$(git-cliff --bumped-version 2>/dev/null | sed 's/^v//')

          if [ "$NEW_VERSION" = "$CURRENT_VERSION" ] || [ "$NEW_VERSION" = "" ]; then
            # No version bump needed
            COMMIT_MSG=$(git log -1 --pretty=%s)
            echo "ℹ️  No version bump needed for: ${COMMIT_MSG}"
            echo "bump=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "🔼 Bumping version: ${CURRENT_VERSION} → ${NEW_VERSION}"
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "bump=true" >> $GITHUB_OUTPUT

      - name: Create git tag
        if: steps.version.outputs.bump == 'true'
        run: |
          VERSION="v${{ steps.version.outputs.version }}"

          # Check if tag already exists locally or remotely
          if git rev-parse "${VERSION}" >/dev/null 2>&1; then
            echo "ℹ️  Tag ${VERSION} already exists locally"
          elif git ls-remote --tags origin | grep -q "refs/tags/${VERSION}"; then
            echo "ℹ️  Tag ${VERSION} already exists on remote"
          else
            echo "✅ Creating new tag ${VERSION}"
            git tag "${VERSION}"
            git push origin "${VERSION}"
          fi

      - name: Package Helm chart with semver
        if: steps.version.outputs.bump == 'true'
        run: |
          CHART_NAME=$(grep '^name:' ${{ env.CHART_PATH }}/Chart.yaml | awk '{print $2}')

          # Update Chart.yaml with semantic version
          sed -i "s/^version:.*/version: ${{ steps.version.outputs.version }}/" ${{ env.CHART_PATH }}/Chart.yaml

          helm package ${{ env.CHART_PATH }}
          echo "chart_name=${CHART_NAME}" >> $GITHUB_OUTPUT
        id: package

      - name: Log in to GitHub Container Registry (Helm)
        if: steps.version.outputs.bump == 'true'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | \
            helm registry login "${{ env.REGISTRY }}" \
            -u "${{ github.actor }}" --password-stdin

      - name: Log in to GitHub Container Registry (Docker/Cosign)
        if: steps.version.outputs.bump == 'true'
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if version already exists
        if: steps.version.outputs.bump == 'true'
        run: |
          CHART_NAME="${{ steps.package.outputs.chart_name }}"
          VERSION=${{ steps.version.outputs.version }}

          # Check if the version already exists in GHCR
          chart_url="oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }}/${CHART_NAME}"
          if helm pull "${chart_url}" --version "${VERSION}" 2>/dev/null; then
            echo "❌ ERROR: Version ${VERSION} already exists in registry!"
            echo "🚫 Chart versions are immutable and cannot be overwritten."
            exit 1
          else
            echo "✅ Version ${VERSION} does not exist - safe to publish"
          fi

      - name: Push chart with semver tag
        if: steps.version.outputs.bump == 'true'
        id: push_semver
        run: |
          CHART_NAME="${{ steps.package.outputs.chart_name }}"
          VERSION=${{ steps.version.outputs.version }}

          chart_url="oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }}"
          PUSH_OUTPUT=$(helm push "${CHART_NAME}-${VERSION}.tgz" "${chart_url}" 2>&1)
          echo "$PUSH_OUTPUT"

          DIGEST=$(echo "$PUSH_OUTPUT" | grep Digest | awk '{print $2}')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "✅ Published ${CHART_NAME}:${VERSION} with digest ${DIGEST}"
          echo "🔒 This version is now immutable and cannot be overwritten"

      - name: Sign chart with semver tag
        if: steps.version.outputs.bump == 'true'
        run: |
          chart_ref="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }}/${{ steps.package.outputs.chart_name }}@${{ steps.push_semver.outputs.digest }}"
          cosign sign --yes "${chart_ref}"

      - name: Tag as latest-stable
        if: steps.version.outputs.bump == 'true'
        id: push_stable
        run: |
          CHART_NAME="${{ steps.package.outputs.chart_name }}"
          VERSION=${{ steps.version.outputs.version }}

          # Pull the chart we just pushed
          chart_url="oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }}/${CHART_NAME}"
          helm pull "${chart_url}" --version "${VERSION}"

          # Re-package with latest-stable tag (semver-compatible)
          tar -xzf ${CHART_NAME}-${VERSION}.tgz
          sed -i "s/^version:.*/version: 0.0.0-latest-stable/" ${CHART_NAME}/Chart.yaml
          helm package ${CHART_NAME}

          # Push with latest-stable tag
          chart_url="oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }}"
          PUSH_OUTPUT=$(helm push "${CHART_NAME}-0.0.0-latest-stable.tgz" "${chart_url}" 2>&1)
          echo "$PUSH_OUTPUT"

          DIGEST=$(echo "$PUSH_OUTPUT" | grep Digest | awk '{print $2}')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "✅ Tagged as ${CHART_NAME}:latest-stable with digest ${DIGEST}"

      - name: Sign latest-stable tag
        if: steps.version.outputs.bump == 'true'
        run: |
          chart_ref="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_REGISTRY_PATH }}/${{ steps.package.outputs.chart_name }}@${{ steps.push_stable.outputs.digest }}"
          cosign sign --yes "${chart_ref}"

      - name: Install syft for SBOM generation
        if: steps.version.outputs.bump == 'true'
        uses: anchore/sbom-action/download-syft@aa0e114b2e19480f157109b9922bda359bd98b90 # v0.18.6

      - name: Generate SBOM
        if: steps.version.outputs.bump == 'true'
        run: |
          CHART_NAME="${{ steps.package.outputs.chart_name }}"
          VERSION=${{ steps.version.outputs.version }}

          # Generate SBOM for the packaged chart
          syft packages file:${CHART_NAME}-${VERSION}.tgz \
            --output spdx-json \
            --file ${CHART_NAME}-${VERSION}.spdx.json

          echo "✅ SBOM generated: ${CHART_NAME}-${VERSION}.spdx.json"

      - name: Generate provenance attestations
        if: steps.version.outputs.bump == 'true'
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: |
            ${{ steps.package.outputs.chart_name }}-${{ steps.version.outputs.version }}.tgz
            ${{ steps.package.outputs.chart_name }}-${{ steps.version.outputs.version }}.spdx.json

      - name: Create GitHub Release
        if: steps.version.outputs.bump == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CHART_NAME="${{ steps.package.outputs.chart_name }}"
          VERSION=${{ steps.version.outputs.version }}

          # Generate release notes for this version with git-cliff
          RELEASE_NOTES=$(git-cliff --latest --strip all)

          gh release create "v${VERSION}" \
            --title "v${VERSION}" \
            --notes "${RELEASE_NOTES}" \
            ${CHART_NAME}-${VERSION}.tgz \
            ${CHART_NAME}-${VERSION}.spdx.json
