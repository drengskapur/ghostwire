name: CI

on:
  push:
    branches: [main]
    paths:
      - 'chart/**'
      - 'images/**'
      - '.github/workflows/ci.yml'

env:
  REGISTRY: ghcr.io
  NAMESPACE: drengskapur
  IMAGE_NAME: ghostwire/tools

jobs:
  lint-test-push-chart:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'chart/') || contains(github.event.head_commit.added, 'chart/')
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Lint chart (strict)
        working-directory: chart
        run: |
          helm dependency update
          # Extract tgz dependencies for lint
          for tgz in charts/*.tgz; do
            [ -f "$tgz" ] && tar -xzf "$tgz" -C charts/
          done
          helm lint . --strict

      - name: Template chart
        working-directory: chart
        run: helm template test . > /dev/null

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Check if version already exists
        working-directory: chart
        run: |
          VERSION=$(grep '^version:' Chart.yaml | awk '{print $2}')
          CHART_NAME=$(grep '^name:' Chart.yaml | awk '{print $2}')

          # Check if the version already exists in GHCR
          if helm pull oci://${{ env.REGISTRY }}/${{ env.NAMESPACE }}/chart/${CHART_NAME} --version ${VERSION} 2>/dev/null; then
            echo "❌ ERROR: Version ${VERSION} already exists in registry!"
            echo "🚫 Chart versions are immutable and cannot be overwritten."
            echo "💡 Please bump the version in Chart.yaml before pushing."
            exit 1
          else
            echo "✅ Version ${VERSION} does not exist - safe to publish"
          fi

      - name: Package and push chart
        working-directory: chart
        run: |
          VERSION=$(grep '^version:' Chart.yaml | awk '{print $2}')
          CHART_NAME=$(grep '^name:' Chart.yaml | awk '{print $2}')
          helm package . --destination /tmp
          helm push "/tmp/${CHART_NAME}-${VERSION}.tgz" "oci://${{ env.REGISTRY }}/${{ env.NAMESPACE }}/chart"
          echo "✅ Pushed ${CHART_NAME}:${VERSION} to oci://${{ env.REGISTRY }}/${{ env.NAMESPACE }}/chart"
          echo "🔒 This version is now immutable and cannot be overwritten"

  build-test-push-tools:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'images/') || contains(github.event.head_commit.added, 'images/')
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install cosign
        uses: sigstore/cosign-installer@v4.0.0

      - name: Get commit SHA
        id: commit
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and test image
        uses: docker/build-push-action@v6
        with:
          context: images/tools
          file: images/tools/Dockerfile
          load: true
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test image
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}:test bash -c "
            set -e
            echo '✅ Testing installed tools...'
            kubectl version --client
            helm version --short
            jq --version
            curl --version
            nmap --version
            echo '✅ All tools working correctly'
          "

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Build and push main tag
        id: push_main
        uses: docker/build-push-action@v6
        with:
          context: images/tools
          file: images/tools/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:0.0.0-main.${{ steps.commit.outputs.sha_short }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign main tag
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}@${{ steps.push_main.outputs.digest }}

      - name: Build and push latest tag
        id: push_latest
        uses: docker/build-push-action@v6
        with:
          context: images/tools
          file: images/tools/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:0.0.0-latest
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha

      - name: Sign latest tag
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}@${{ steps.push_latest.outputs.digest }}
          echo "✅ Published ${{ env.IMAGE_NAME }}:latest"
